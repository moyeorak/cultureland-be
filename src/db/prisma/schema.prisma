generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                    @id @default(autoincrement())
  email            String                 @unique
  password         String
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  deletedAt        DateTime?
  followers        Follow[]               @relation("Followings")
  followings       Follow[]               @relation("Followers")
  reviews          Review[]
  reviewReactions  ReviewReaction[]
  attendedEvents   UserAttendedEvents[]
  interestedEvents UserInterestedEvents[]
  userProfile      UserProfile?
}

model UserProfile {
  userId       Int     @id
  user         User    @relation(fields: [userId], references: [id])
  nickname     String  @unique
  profileImage String?
  description  String
}

model Follow {
  followerId  Int
  follower    User @relation("Followers", fields: [followerId], references: [id])
  followingId Int
  following   User @relation("Followings", fields: [followingId], references: [id])

  @@id([followerId, followingId])
}

model Partner {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  business  Business?
  events    Event[]
}

model Business {
  partnerId      Int     @id
  registrationId String  @unique
  phoneNumber    String
  name           String
  ownerName      String
  address        String
  bankName       String
  bankAccount    String
  partner        Partner @relation(fields: [partnerId], references: [id])
}

model Review {
  id              Int              @id @default(autoincrement())
  reviewer        User             @relation(fields: [reviewerId], references: [id])
  reviewerId      Int
  event           Event            @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId         Int
  isVerified      Boolean          @default(false)
  rating          Int
  content         String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  deletedAt       DateTime?
  image           String
  reviewReactions ReviewReaction[]

  @@unique([reviewerId, eventId])
}

model UserAttendedEvents {
  user         User   @relation(fields: [userId], references: [id])
  userId       Int
  event        Event  @relation(fields: [eventId], references: [id])
  eventId      Int
  receiptImage String

  @@id([userId, eventId])
}

model UserInterestedEvents {
  user    User  @relation(fields: [userId], references: [id])
  userId  Int
  event   Event @relation(fields: [eventId], references: [id])
  eventId Int

  @@id([userId, eventId])
}

model ReviewReaction {
  userId        Int
  reviewId      Int
  reactionValue Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  review        Review    @relation(fields: [reviewId], references: [id])
  user          User      @relation(fields: [userId], references: [id])

  @@id([userId, reviewId])
}

model Event {
  id              Int                    @id @default(autoincrement())
  partnerId       Int
  title           String
  poster          String
  startDate       DateTime
  endDate         DateTime
  venueId         Int
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  deletedAt       DateTime?
  apiId           String                 @unique
  areaCode        Int
  category        Category               @relation(fields: [categoryCode], references: [code])
  area            Area                   @relation(fields: [areaCode], references: [code])
  partner         Partner                @relation(fields: [partnerId], references: [id])
  venue           Venue                  @relation(fields: [venueId], references: [id])
  eventDetail     EventDetail?
  reviews         Review[]
  attendedUsers   UserAttendedEvents[]
  interestedUsers UserInterestedEvents[]
  categoryCode    Int
}

model EventDescriptionImage {
  id          Int         @id @default(autoincrement())
  eventId     Int
  imageUrl    String
  eventDetail EventDetail @relation(fields: [eventId], references: [eventId], onDelete: Cascade)
}

model EventDetail {
  eventId            Int                     @id
  event              Event                   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  bookingLinks       BookingLink[]
  description        String?
  description_images EventDescriptionImage[]
  price              String
  runtime            String
  timeInfo           String
  targetAudience     String
  eventStatusCode    Int
  eventStatus        EventStatus             @relation(fields: [eventStatusCode], references: [code])
}

model EventStatus {
  code        Int           @id @default(autoincrement())
  status      String        @unique
  eventDetail EventDetail[]
}

model Venue {
  id        Int     @id @default(autoincrement())
  apiId     String  @unique
  name      String
  address   String
  latitude  Float
  longitude Float
  event     Event[]
}

model Category {
  code  Int     @id @default(autoincrement())
  value String  @unique
  event Event[]
}

model BookingLink {
  id          Int          @id @default(autoincrement())
  link        String
  name        String
  eventDetail EventDetail? @relation(fields: [eventId], references: [eventId])
  eventId     Int?

  @@unique([eventId, name])
}

model Area {
  code  Int     @id @default(autoincrement())
  name  String  @unique
  event Event[]
}
