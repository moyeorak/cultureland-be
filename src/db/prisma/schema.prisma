// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  email           String           @unique
  password        String
  // provider_type
  // provider_id   String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  deletedAt       DateTime?
  userProfile     UserProfile?
  reviews         Review[]
  reviewReactions ReviewReaction[]
  followings      Follow[]         @relation("Followings")
  followers       Follow[]         @relation("Followers")
  UserEvents      UserEvents[]
}

model UserProfile {
  userId       Int     @id
  user         User    @relation(fields: [userId], references: [id])
  nickname     String  @unique
  profileImage String?
}

model Partner {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  business  Business?
}

model Business {
  partnerId      Int     @id
  partner        Partner @relation(fields: [partnerId], references: [id])
  registrationId String  @unique
  phoneNumber    String
  name           String
  ownerName      String
  address        String
  bankName       String
  bankAccount    String
}

model Review {
  id              Int              @id @default(autoincrement())
  reviewer        User             @relation(fields: [reviewerId], references: [id])
  reviewerId      Int
  // event
  eventId         Int
  image           String
  rating          Int
  content         String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  deletedAt       DateTime?
  reviewReactions ReviewReaction[]
}

model ReviewReaction {
  user          User      @relation(fields: [userId], references: [id])
  userId        Int
  review        Review    @relation(fields: [reviewId], references: [id])
  reviewId      Int
  reactionValue Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  @@id([userId, reviewId])
}

model Follow {
  follower    User @relation("Followers", fields: [followerId], references: [id])
  followerId  Int
  following   User @relation("Followings", fields: [followingId], references: [id])
  followingId Int

  @@id([followerId, followingId])
}

model UserEvents {
  user         User    @relation(fields: [userId], references: [id])
  userId       Int
  // event
  eventId      Int
  isVerified   Boolean @default(false)
  receiptImage String

  @@id([userId, eventId])
}
